package

    ${package}.${moduleName}.controller;

import com.xjs.common.base.BaseResult;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.zhuo.${mainPath}.core.common.controller.ControlBaseController;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.xjs.common.page.PageResponse;
import com.xjs.common.token.PreventDuplicateSubmission;
import com.xjs.common.impExp.excel.ExcelImportUtil;
import com.xjs.common.impExp.excel.entity.ExportParams;
import com.xjs.common.impExp.excel.entity.ImportParams;
import com.xjs.common.impExp.excel.entity.result.ExcelImportResult;
import com.xjs.common.impExp.util.PoiPublicUtil;

import ${package}.${moduleName}.model.${className};
import ${package}.${moduleName}.service.I${className}Service;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@Api(value = "${comments}", description = "${comments}")
@RequestMapping({"/${mainPath}/${classname}"})
public class ${className}Controller extends ControlBaseController<${className}> {
    @Autowired
    private I${className}Service ${classname}Service;

    @RequestMapping(value = {"/index"}, method = {RequestMethod.GET})
    public String index(${className} ${classname}, ModelMap modelMap) {
        modelMap.put("${classname}", ${classname});
        return "/${mainPath}/${jsppath}/${moduleName}/${classname}/index.jsp";
    }

    @ApiOperation(value = "${comments}", notes = "获取${comments}")
    @ApiImplicitParam(name = "page", value = "分页对象和查询条件page", required = true, dataType = "PageResponse")
    @RequestMapping(value = {"/list"}, method = {RequestMethod.GET})
    @ResponseBody
    public Object list(@ModelAttribute PageResponse page, HttpServletRequest request) {
        EntityWrapper<${className}> entityWrapper = new EntityWrapper<${className}>();
        entityWrapper = getParameter(page, entityWrapper, request);
        Page<${className}> list = ${classname}Service.selectPage(getPage(page), searchParams(page, entityWrapper));
        Map<String, Object> result = new HashMap<>();
        result.put("rows", list.getRecords());
        result.put("total", list.getTotal());
        return result;
    }

    // 供列表查询和导出查询使用
    private EntityWrapper<${className}> getParameter(PageResponse page,
                                                     EntityWrapper<${className}> entityWrapper,
                                                     HttpServletRequest request) {
        //条件查询，请根据表情况进行修改
//		entityWrapper.like("unitname", page.getParameter()).or()
//		.like("ssex", page.getParameter());
        return entityWrapper;
    }

    @PreventDuplicateSubmission(needSaveToken = true)
    @RequestMapping(value = "/create", method = RequestMethod.GET)
    public String create(ModelMap modelMap,${className} ${classname}) {
        modelMap.put("${classname}", ${classname});
        return "/${mainPath}/${jsppath}/${moduleName}/${classname}/create.jsp";
    }

    @ApiOperation(value = "${comments}保存", notes = "")
    @ApiImplicitParam(name = "${classname}", value = "${comments}实体${classname}", required = true, dataType = "${className}")
    @PreventDuplicateSubmission(needRemoveToken = true)
    @RequestMapping(value = "/create", method = RequestMethod.POST)
    @ResponseBody
    public Object create(${className} ${classname}, HttpServletRequest request) {
        BaseResult baseResult = null;
        try {
            baseResult = ${classname}Service.create1(${classname}, attachmentList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baseResult;
    }

    @ApiImplicitParam(name = "id", value = "${comments}ID", required = true, dataType = "String")
    @PreventDuplicateSubmission(needSaveToken = true)
    @RequestMapping(value = "/update/{id}", method = RequestMethod.GET)
    public String update(@PathVariable("id") String id, ModelMap modelMap) {
        ${className} ${classname} =${classname}Service.selectById(id);
        modelMap.put("${classname}", ${classname});
        return "/${mainPath}/${jsppath}/${moduleName}/${classname}/create.jsp";
    }

    @ApiOperation(value = "${comments}修改", notes = "")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "${comments}ID", required = true, dataType = "String"),
            @ApiImplicitParam(name = "${classname}", value = "${comments}实体${classname}", required = true, dataType = "${className}")
    })
    @PreventDuplicateSubmission(needRemoveToken = true)
    @RequestMapping(value = "/update/{id}", method = RequestMethod.POST)
    @ResponseBody
    public Object update(@PathVariable("id") String id,${className} ${classname}, HttpServletRequest request) {
        BaseResult baseResult = null;
        try {
            baseResult = ${classname}Service.update1(${classname}, attachmentList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baseResult;
    }

    @ApiOperation(value = "删除${comments}", notes = "")
    @ApiImplicitParam(name = "ids", value = "${comments}IDS", required = true, dataType = "String")
    @RequestMapping(value = "/delete/{ids}", method = RequestMethod.GET)
    @ResponseBody
    public Object delete(@PathVariable("ids") String ids) {
        BaseResult baseResult = null;
        try {
            baseResult = ${classname}Service.delete1(ids);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baseResult;
    }

    @ApiOperation(value = "${comments}查看", notes = "")
    @ApiImplicitParam(name = "id", value = "${comments}ID", required = true, dataType = "String")
    @RequestMapping(value = "/show/{id}", method = RequestMethod.GET)
    public String show(@PathVariable("id") String id, ModelMap modelMap) {
        ${className} ${classname} =${classname}Service.selectById(id);
        modelMap.put("${classname}", ${classname});
        return "/${mainPath}/${jsppath}/${moduleName}/${classname}/show.jsp";
    }

    @RequestMapping(value = "/findField", method = RequestMethod.GET)
    public String findField(String path, ModelMap modelMap) throws Exception {
        // 获取实体需要导入的字段
        Map<String, String> fieldInfo = PoiPublicUtil
                .getClassFieldsExcel(${className}. class);
        modelMap.put("fieldInfo", fieldInfo);
        // 获取excel字段
        ImportParams params = new ImportParams();
        params.setHeadRows(0);
        List<String> excelList = new ArrayList<>();
        excelList = PoiPublicUtil.getTitleMap(path, params);
        modelMap.put("excelList", excelList);

        return "/common/impExp/importField.jsp";
    }

    @ApiOperation(value = "${comments}执行excel导入", notes = "")
    @RequestMapping(value = "/insertImport", method = {RequestMethod.POST})
    @ResponseBody
    public Object insertImport(HttpServletRequest request) throws Exception {
        if (null == request.getParameter("path")) {
            return renderError("请上传导入的文件！");
        }
        ImportParams params = new ImportParams();
        params.setNeedVerfiy(true);//数据据验证
        ExcelImportResult<${className}> impResult = ExcelImportUtil
                .importExcelMore(new File(request.getParameter("path")), ${className}. class,params);
        boolean isTrue = ${classname}Service.insertBatchExcel(impResult);
        if (!isTrue) {
            return renderError("${comments}导入失败！");
        }
        return renderSuccess("${comments}导入成功！");
    }

    @RequestMapping(value = "/exportForward", method = {RequestMethod.GET,
            RequestMethod.POST})
    public String exportForward(ModelMap modelMap) {
        Map<String, String> fieldInfo = PoiPublicUtil
                .getClassFieldsExcel(${className}. class);
        modelMap.put("fieldInfo", fieldInfo);
        return "/common/impExp/exportForward.jsp";
    }

    @ApiOperation(value = "${comments}excel导出并下载", notes = "")
    @RequestMapping(value = "/export${className}", method = {RequestMethod.GET})
    @ResponseBody
    public ResponseEntity<byte[]> export${className}(ModelMap modelMap,
                                                     @ModelAttribute PageResponse page, HttpServletRequest request) {
        EntityWrapper<${className}> entityWrapper = new EntityWrapper<${className}>();
        //查询沟选的还是所有数据
        if (null != page.getItemIds() && !"".equals(page.getItemIds())) {
            entityWrapper.in("id", Arrays.asList(page.getItemIds().split(",")));
        } else {
            entityWrapper = getParameter(page, entityWrapper, request);
            entityWrapper = searchParams(page, entityWrapper);
        }
        List<${className}> list = new ArrayList<${className}>();
        list = ${classname}Service.selectList(entityWrapper);
        ExportParams expParams = new ExportParams(null, "${comments}");
        expParams.setAddIndex(true);//添加序列
        expParams.setExclusions(page.getFieldIds().split(","));//设置过滤列
        return getResponseEntity("${comments}.xls", export(expParams, list, ${className}. class),request);
    }

    @ApiOperation(value = "${comments}word导出并下载", notes = "")
    @RequestMapping(value = "/expWord/{id}", method = {RequestMethod.GET})
    @ResponseBody
    public ResponseEntity<byte[]> word${className}(@PathVariable("id") String id, HttpServletRequest request) {
        ${className} ${classname} =${classname}Service.selectById(id);
        return exportWord("word\\\\${classname}\\\\${classname}.docx", "${comments}.docx",${classname}.get${className}Map(),
        request);
    }
}
